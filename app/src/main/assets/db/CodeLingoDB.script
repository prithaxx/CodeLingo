CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE MEMORY TABLE PUBLIC.ACCOUNT(id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 100, INCREMENT BY 1) PRIMARY KEY, name VARCHAR(100) NOT NULL, isGuest BOOLEAN, activeCourseId INTEGER, username VARCHAR(100), password VARCHAR(100));
CREATE MEMORY TABLE PUBLIC.COURSE(id INTEGER IDENTITY, name VARCHAR(100) NOT NULL, description VARCHAR(1000), PRIMARY KEY(id));
CREATE MEMORY TABLE PUBLIC.CHAPTER(id INTEGER IDENTITY, name VARCHAR(100) NOT NULL, courseId INTEGER, description VARCHAR(1000), PRIMARY KEY(id));
CREATE MEMORY TABLE PUBLIC.QUIZ(id INTEGER IDENTITY, chapterId INTEGER, type VARCHAR(100), prompt VARCHAR(100), hasAnswer BOOLEAN, answer VARCHAR(1000), wrongAnswers VARCHAR(1000), wrongFeedback VARCHAR(100), correctFeedback VARCHAR(100), PRIMARY KEY(id));
CREATE MEMORY TABLE PUBLIC.COURSE_COMPLETION(accountId INTEGER NOT NULL, courseId INTEGER NOT NULL, isStarted BOOLEAN, isCompleted BOOLEAN);
CREATE MEMORY TABLE PUBLIC.CHAPTER_COMPLETION(accountId INTEGER NOT NULL, chapterId INTEGER NOT NULL, isUnlocked BOOLEAN, isCompleted BOOLEAN);
CREATE MEMORY TABLE PUBLIC.QUIZ_COMPLETION(accountId INTEGER NOT NULL, quizId INTEGER NOT NULL);
CREATE MEMORY TABLE PUBLIC.LOCAL_PREFERENCES(activeAccountId INTEGER NOT NULL, autoLogin BOOLEAN);
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e';
ALTER USER SA SET LOCAL TRUE;
CREATE SCHEMA PUBLIC AUTHORIZATION DBA;
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC;
GRANT DBA TO SA;
SET WRITE_DELAY 20;
SET FILES SCALE 32;
SET SCHEMA public;
INSERT INTO PUBLIC.ACCOUNT VALUES (1, 'John Doe', FALSE, 1, 'john.doe', 'password');
INSERT INTO PUBLIC.ACCOUNT VALUES (2, 'Jane Smith', TRUE, 2, 'janesmith01', 'password01');
INSERT INTO COURSE VALUES(1, 'Java Basics', '"Java Basics" introduces fundamental concepts in Java programming, including variables, control flow, methods, classes, and object-oriented programming. Through practical exercises, students gain hands-on experience to develop basic Java applications. This course provides the foundational knowledge necessary for further exploration of Java programming.');
INSERT INTO COURSE VALUES(2, 'Java Advanced', '"Java Advanced" delves deeper into Java programming, covering advanced topics such as inheritance, polymorphism, exception handling, generics, and multithreading. Students expand their understanding through practical implementations and complex problem-solving exercises. This course equips learners with the advanced skills required for developing robust and scalable Java applications.');
INSERT INTO CHAPTER VALUES(1, 'Variables and Data Types', 2, 'This section covers the creation and use of variables, as well as different data types such as integers, floating-point numbers, characters, and strings. Through practical examples and exercises, learners understand how to declare variables, assign values, and manipulate data, laying a solid groundwork for more advanced Java concepts.');
INSERT INTO CHAPTER VALUES(2, 'Conditionals and Loops', 1, 'This section covers the implementation of conditionals like if-else, switch case, followed by looping with for, while and do-while loops. Through practical examples and exercises, learners understand how to use if-else blocks, switch cases and loops.');
INSERT INTO CHAPTER VALUES(3, 'Polymorphism', 2, 'This section explores how objects can take on multiple forms, allowing methods to behave differently based on the object's specific type. Through examples and exercises, students understand how polymorphism enhances flexibility and modularity in Java code, facilitating more efficient and dynamic program design.');
INSERT INTO CHAPTER VALUES(4, 'Inheritance', 2, 'The "Inheritance" chapter in Java explores a crucial concept in object-oriented programming. It illustrates how classes can inherit attributes and behaviors from other classes, fostering code reuse and hierarchy establishment. Through examples and exercises, learners grasp how inheritance promotes modular and scalable software design in Java applications.');
INSERT INTO QUIZ VALUES(1, 1, 'MULTI_CHOICE', 'What will be the data type for message? message = "Hello World"', TRUE, 'String', 'int, float, boolean', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(2, 1, 'SHORT_ANSWER', 'Write the keyword that is needed to show that PI is a constant', TRUE, 'final', 'null, null, null', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(3, 2, 'MULTI_CHOICE', 'Which loop executes at least once?' TRUE, 'do-while', 'for, while, all of the options', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(4, 2, 'SHORT_ANSWER', 'Fill in the blank: int num = 2; if(_) return "even"; else return "odd";', TRUE , 'num%2 == 0', 'null, null, null', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(5, 3, 'MULTI_CHOICE', 'What does polymorphism in Java allow?', TRUE, 'Dynamic method binding', 'Multiple Inheritance, Encapsulation, Data hiding', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(6, 3, 'SHORT_ANSWER', 'What does polymorphism allow in Java?', TRUE, 'Multiple instances', 'null, null, null', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(7, 4, 'MULTI_CHOICE', 'Which feature allows a class in Java to inherit attributes and behaviours from another class?', TRUE, 'Inheritance', 'Abstraction, Polymorphism, Encapsulation', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO QUIZ VALUES(8, 4, 'SHORT_ANSWER', 'What keyword do we use in Java to inherit properties of Parent class in Child class?', TRUE, 'extends', 'null, null, null', 'Oops! That's the wrong answer', 'Great job! That's the correct answer!');
INSERT INTO LOCAL_PREFERENCES(1, FALSE);
